// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartMeterWeb.Data.Context;

#nullable disable

namespace SmartMeterWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251029104215_PhotoPathInstead")]
    partial class PhotoPathInstead
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AddressId"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<long>("ConsumerId")
                        .HasColumnType("bigint");

                    b.Property<string>("HouseNo")
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<string>("PinCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("AddressId");

                    b.HasIndex("ConsumerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Arrears", b =>
                {
                    b.Property<long>("ArrearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ArrearId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("ArrearType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("BillId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConsumerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaidStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ArrearId");

                    b.HasIndex("ConsumerId");

                    b.ToTable("Arrears");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Billing", b =>
                {
                    b.Property<long>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BillId"));

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("BillingPeriodEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("BillingPeriodStart")
                        .HasColumnType("date");

                    b.Property<long>("ConsumerId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DisconnectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("GeneratedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MeterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalUnitsConsumed")
                        .HasColumnType("numeric");

                    b.HasKey("BillId");

                    b.HasIndex("ConsumerId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Consumer", b =>
                {
                    b.Property<long>("ConsumerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ConsumerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConsumerId");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Meter", b =>
                {
                    b.Property<string>("MeterSerialNo")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ConsumerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Firmware")
                        .HasColumnType("text");

                    b.Property<string>("ICCID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IMSI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("InstallTsUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MeterSerialNo");

                    b.HasIndex("ConsumerId");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.MeterReading", b =>
                {
                    b.Property<long>("MeterReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MeterReadingId"));

                    b.Property<decimal>("Current")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EnergyConsumed")
                        .HasColumnType("numeric");

                    b.Property<string>("MeterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("MeterReadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Voltage")
                        .HasColumnType("numeric");

                    b.HasKey("MeterReadingId");

                    b.HasIndex("MeterId");

                    b.ToTable("MeterReadings");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Tariff", b =>
                {
                    b.Property<int>("TariffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TariffId"));

                    b.Property<decimal>("BaseRate")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EffectiveTo")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric");

                    b.HasKey("TariffId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.TariffDetails", b =>
                {
                    b.Property<int>("TariffDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TariffDetailsId"));

                    b.Property<int?>("TariffSlabId")
                        .HasColumnType("integer");

                    b.Property<int?>("TodRuleId")
                        .HasColumnType("integer");

                    b.HasKey("TariffDetailsId");

                    b.HasIndex("TariffSlabId");

                    b.HasIndex("TodRuleId");

                    b.ToTable("TariffDetails");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.TariffSlab", b =>
                {
                    b.Property<int>("TariffSlabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TariffSlabId"));

                    b.Property<decimal>("FromKwh")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("RatePerKwh")
                        .HasColumnType("numeric");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ToKwh")
                        .HasColumnType("numeric");

                    b.HasKey("TariffSlabId");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffSlabs");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.TodRule", b =>
                {
                    b.Property<int>("TodRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodRuleId"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RatePerKwh")
                        .HasColumnType("numeric");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TariffId")
                        .HasColumnType("integer");

                    b.HasKey("TodRuleId");

                    b.HasIndex("TariffId");

                    b.ToTable("TodRules");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Address", b =>
                {
                    b.HasOne("SmartMeterWeb.Data.Entities.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Arrears", b =>
                {
                    b.HasOne("SmartMeterWeb.Data.Entities.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Billing", b =>
                {
                    b.HasOne("SmartMeterWeb.Data.Entities.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.Meter", b =>
                {
                    b.HasOne("SmartMeterWeb.Data.Entities.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.MeterReading", b =>
                {
                    b.HasOne("SmartMeterWeb.Data.Entities.Meter", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.TariffDetails", b =>
                {
                    b.HasOne("SmartMeterWeb.Data.Entities.TariffSlab", "TariffSlab")
                        .WithMany()
                        .HasForeignKey("TariffSlabId");

                    b.HasOne("SmartMeterWeb.Data.Entities.TodRule", "TodRule")
                        .WithMany()
                        .HasForeignKey("TodRuleId");

                    b.Navigation("TariffSlab");

                    b.Navigation("TodRule");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.TariffSlab", b =>
                {
                    b.HasOne("SmartMeterWeb.Data.Entities.Tariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("SmartMeterWeb.Data.Entities.TodRule", b =>
                {
                    b.HasOne("SmartMeterWeb.Data.Entities.Tariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tariff");
                });
#pragma warning restore 612, 618
        }
    }
}
